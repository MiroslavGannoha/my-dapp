import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Contract, ethers } from "ethers";
import detectEthereumProvider from "@metamask/detect-provider";
import { makeAutoObservable } from "mobx";
import { observer, useLocalObservable } from "mobx-react-lite";
import { useEffect, useState } from "react";

class App {
  signer: ethers.providers.JsonRpcSigner | null = null;
  provider: ethers.providers.Web3Provider | null = null;
  address: string = "";
  balance: number = 0;
  blocks: number = 0;

  constructor() {
    makeAutoObservable(this);
  }

  *connect() {
    const ethereumProvider: ethers.providers.ExternalProvider =
      yield detectEthereumProvider() as ethers.providers.ExternalProvider;
    if (!ethereumProvider || !ethereumProvider.request) {
      throw new Error("Provider not found!");
    }

    try {
      yield ethereumProvider.request({ method: "eth_requestAccounts" });
    } catch (e) {
      console.warn(e);
      return;
    }
    this.provider = new ethers.providers.Web3Provider(ethereumProvider);
    // const provider = new ethers.providers.JsonRpcProvider();
    this.signer = this.provider.getSigner();
    this.address = yield this.signer.getAddress();
    console.log(this.address);
    this.balance = yield (yield this.signer.getBalance()).toString();
    this.blocks = yield this.provider.getBlockNumber();
    // const balance = await provider.getBalance("ethers.eth")
    // console.log(balance);
  }

  get isConnected(): boolean {
    return Boolean(this.provider);
  }
}

const app = new App();

class GreetContract {
  signer: ethers.providers.JsonRpcSigner | null = null;
  contract: ethers.Contract | null = null;
  greeting: string = "";
  constructor(signer: ethers.providers.JsonRpcSigner) {
    console.log('constructor');
    
    // The Contract object
    const daiAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
    const daiAbi = [
      // Some details about the token
      "function greet() public view returns (string memory)",
      "function setGreeting(string memory _greeting)",

      // "function symbol() view returns (string)",

      // // Get the account balance
      // "function balanceOf(address) view returns (uint)",

      // // Send some of your tokens to someone else
      // "function transfer(address to, uint amount)",

      // // An event triggered whenever anyone transfers to someone else
      // "event Transfer(address indexed from, address indexed to, uint amount)"
    ];
    this.contract = new ethers.Contract(daiAddress, daiAbi, signer);
    console.log('contract', this.contract);
    
    makeAutoObservable(this);
  }

  *greet() {
    this.greeting = yield this.contract?.greet();
  }

  *setGreet(greeting: string) {
    yield this.contract?.setGreeting(greeting);
  }
}

// initEther();
const Home = observer(() => {
  const state = useLocalObservable((): {
    contract: GreetContract | null;
    setContract: (contract: GreetContract) => void;
    newGreeting: string;
    setNewGreeting: (val: string) => void
  } => ({
    contract: null,
    setContract(contract: GreetContract) {
      console.log({contract});
      
      this.contract = contract;
    },
    newGreeting: '',
    setNewGreeting(newGreeting: string) {
      this.newGreeting = newGreeting;
    },
  }));
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <button
        onClick={() => app.connect()}
        className="bg-blue-300 p-3 rounded-xl border-blue-600 border-solid border w-200 m-3 focus:outline-none"
      >
        Connect wallet
      </button>
      <main className={styles.main}>
        <div>
          <div>
            <h2>{app.isConnected ? "Connected" : "Not connected"}</h2>
            <p>Address: {app.address}</p>
            <p>Balance: {app.balance}</p>
            <p>Blocks: {app.blocks}</p>
          </div>
        </div>
        <div>
          <button
            onClick={() => {
              if (!app.signer) {
                return;
              }
              const contract = new GreetContract(app.signer);
              console.log({contract});
              
              state.setContract(contract);
            }}
            className="bg-blue-500 p-2"
          >
            Create contract
          </button>
          <button onClick={() => state.contract?.greet()} className="bg-blue-500 p-2">Update greeting</button>
          <h4 className="h-4 font-bold m-3">Greeting: {state.contract?.greeting}</h4>
          <div>
            <input type="text" value={state.newGreeting} onChange={(e) => state.setNewGreeting(e.target.value)} className="bg-yellow-100" />
            <button onClick={(e) => state.contract?.setGreet(state.newGreeting)} className="bg-blue-500 p-2">Submit</button>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
});

export default Home;
